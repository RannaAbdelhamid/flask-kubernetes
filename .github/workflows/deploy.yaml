name: Build and Deploy Flask App

on:
  workflow_dispatch:  

env:
  ACR_NAME: ${{ vars.ACR_NAME }}     
  IMAGE_NAME: rana-flaskapp           
  IMAGE_TAG: rana                    
  RELEASE_NAME: rana-flask

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "Building Docker image: $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG"
          docker build -t $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG .

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACR_NAME }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          echo "Pushing image to: $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG"
          docker push $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG

      - name: Set kubeconfig from secret
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_FILE }}" > ~/.kube/config

      - name: Test Kubernetes connection
        run: kubectl get nodes

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Create namespace
        run: kubectl create namespace rana-namespace --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Helm chart
        run: |
          - name: Deploy Helm chart
        run: |
           helm upgrade --install $RELEASE_NAME ./helm \
               --namespace rana-namespace \
               --set image.repository=${{ vars.ACR_NAME }}/rana-flask \
               --set image.tag=rana \
               --set replicaCount=2


      - name: Get Flask app public IP
        run: |
          echo "Waiting for LoadBalancer to get an IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc $RELEASE_NAME-service -n rana-namespace -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$IP" ]; then
              echo "‚úÖ Flask app public IP: $IP"
              echo "üåç Access at: http://$IP:5000"
              exit 0
            fi
            echo "Still waiting... ($i/30)"
            sleep 10
          done
          echo "‚ùå Timed out waiting for public IP"
          exit 1
#--------------------